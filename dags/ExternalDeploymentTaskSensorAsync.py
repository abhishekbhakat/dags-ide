"""
ExternalDeploymentTaskSensorAsync
DAG auto-generated by Astro Cloud IDE.
"""

from airflow.decorators import dag
from airflow.models import Variable
from astro import sql as aql
from astronomer.providers.core.sensors.external_task import ExternalDeploymentTaskSensorAsync
import pandas as pd
import pendulum

import os
from datetime import timedelta
from typing import Any, Dict

import requests
from airflow import DAG
from airflow.hooks.base import BaseHook
from airflow.operators.python import PythonOperator
from airflow.utils.log.secrets_masker import mask_secret
from airflow.utils.timezone import datetime
from airflow.models import Variable

from astronomer.providers.core.sensors.external_task import (
    ExternalDeploymentTaskSensorAsync,
)

@aql.dataframe(task_id="python_1")
def python_1_func():
    
    return {
        "cache-control": "no-cache",
        "content-type": "application/json",
        "accept": "application/json",
        "Authorization": "Bearer " + str(Variable.get('ASTRONOMER_KEY_SECRET')),
    }

default_args={
    "owner": "Open in Cloud IDE",
}

@dag(
    default_args=default_args,
    schedule="0 0 * * *",
    start_date=pendulum.from_format("2023-08-14", "YYYY-MM-DD").in_tz("UTC"),
    catchup=False,
    owner_links={
        "Open in Cloud IDE": "https://cloud.astronomer.io/cl0n1675p186971fwyfaumecrc/cloud-ide/cleiioon5008i01krj5dqtaku/cllalr84r000a01mowfm6wvdw",
    },
)
def ExternalDeploymentTaskSensorAsync():
    python_1 = python_1_func()

    external_deployment_task_sensor_async_1 = ExternalDeploymentTaskSensorAsync(
        endpoint="'/api/v1/dags/wait_for_me/dagRuns/scheduled__2023-08-14T07:00:00+00:00/taskInstances/wait_for_x_seconds'",
        http_conn_id="astro_avi_test",
        headers=python_1.output,
        task_id="external_deployment_task_sensor_async_1",
    )

    external_deployment_task_sensor_async_1 << python_1

dag_obj = ExternalDeploymentTaskSensorAsync()
